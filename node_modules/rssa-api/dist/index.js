'use strict';

var React = require('react');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class RssaClient {
    constructor(api_url_base, study_id) {
        this.header = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': '*',
            'Access-Control-Allow-Methods': 'OPTIONS,PUT,POST,GET'
        };
        this.api_url_base = api_url_base;
        this.study_id = study_id;
    }
    get(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.api_url_base}${path}`;
            const response = yield fetch(url, {
                method: 'GET',
                headers: Object.assign(Object.assign({}, this.header), { 'X-Study-Id': `${this.study_id}` })
            });
            if (!response.ok) {
                throw new Error(`Failed to fetch data from ${url}`);
            }
            return response.json();
        });
    }
    post(path, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.api_url_base}${path}`;
            const response = yield fetch(url, {
                method: 'POST',
                headers: Object.assign(Object.assign({}, this.header), { 'X-Study-Id': `${this.study_id}` }),
                body: JSON.stringify(data)
            });
            if (!response.ok) {
                console.log(response);
                throw new Error(`Failed to post data to ${url}`);
            }
            return response.json();
        });
    }
    put(path, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.api_url_base}${path}`;
            const response = yield fetch(url, {
                method: 'PUT',
                headers: Object.assign(Object.assign({}, this.header), { 'X-Study-Id': `${this.study_id}` }),
                body: JSON.stringify(data)
            });
            if (!response.ok) {
                throw new Error(`Failed to update data to ${url}`);
            }
        });
    }
}

const StudyContext = React.createContext(null);
const StudyProvider = ({ config, children }) => {
    const { api_url_base, study_id } = config;
    const [studyApi] = React.useState(new RssaClient(api_url_base, study_id));
    const value = React.useMemo(() => ({ studyApi }), [studyApi]);
    return (React.createElement(StudyContext.Provider, { value: value }, children));
};
const useStudy = () => {
    const context = React.useContext(StudyContext);
    console.log("useStudy", context);
    if (!context) {
        throw new Error('useStudy must be used within a StudyProvider');
    }
    return context;
};

const emptyParticipant = {
    id: '',
    study_id: '',
    participant_type: '',
    external_id: '',
    condition_id: '',
    current_step: '',
    current_page: '',
    date_created: ''
};
function isEmptyParticipant(participant) {
    return participant.id === emptyParticipant.id;
}
const emptyStep = {
    id: '',
    study_id: '',
    name: '',
    description: '',
    pages: [],
    date_created: '',
    order_position: 0
};
function isEmptyStep(step) {
    return step.id === emptyStep.id;
}

exports.StudyProvider = StudyProvider;
exports.emptyParticipant = emptyParticipant;
exports.emptyStep = emptyStep;
exports.isEmptyParticipant = isEmptyParticipant;
exports.isEmptyStep = isEmptyStep;
exports.useStudy = useStudy;
